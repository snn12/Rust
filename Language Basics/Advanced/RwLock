use std::sync::{Arc, RwLock};
use std::thread;
use std::collections::HashMap;
use std::time::Duration;

fn main() {
    let cache = Arc::new(RwLock::new(HashMap::new()));

    {
        let mut cache_write = cache.write().unwrap();
        cache_write.insert("user:1".to_string(), "Alice".to_string());
        cache_write.insert("user:2".to_string(), "Bob".to_string());
    }

    let mut handles = vec![];

    for i in 0..5 {
        let cache = Arc::clone(&cache);
        let handle = thread::spawn(move || {
            let cache_read = cache.read().unwrap();
            let user = cache_read.get("user:1").cloned().unwrap_or_else(|| "Unknown".to_string());
            println!("User {} is {}", i, user);
            thread::sleep(Duration::from_secs(1));
        });

        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Last version cache {:?}", cache.read().unwrap());
}
